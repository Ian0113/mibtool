// Code generated by goyacc -o yysmi.go -p smi smi.y. DO NOT EDIT.

//line smi.y:43

package smi

import __yyfmt__ "fmt"

//line smi.y:44

//line smi.y:57
type smiSymType struct {
	yys                  int
	text                 string
	id                   string
	err                  int
	date                 string
	objectPtr            string
	SmiStatus            int
	SmiAccess            int
	typePtr              string
	listPtr              string
	namedNumberPtr       string
	rangePtr             string
	valuePtr             string
	unsigned32           uint32
	integer32            int32
	unsigned64           uint64
	integer64            int64
	compl                string
	index                string
	modulePtr            string
	subjectCategoriesPtr string
	subid                SubID
	subidList            []SubID
	node                 Node
	nodeList             []Node
	idList               []string
	imp                  Import
	impList              []Import
}

const DOT_DOT = 57346
const COLON_COLON_EQUAL = 57347
const UPPERCASE_IDENTIFIER = 57348
const LOWERCASE_IDENTIFIER = 57349
const NUMBER = 57350
const NEGATIVENUMBER = 57351
const NUMBER64 = 57352
const NEGATIVENUMBER64 = 57353
const BIN_STRING = 57354
const HEX_STRING = 57355
const QUOTED_STRING = 57356
const ACCESS = 57357
const AGENT_CAPABILITIES = 57358
const APPLICATION = 57359
const AUGMENTS = 57360
const BEGIN_ = 57361
const BITS = 57362
const CHOICE = 57363
const CONTACT_INFO = 57364
const CREATION_REQUIRES = 57365
const COUNTER32 = 57366
const COUNTER64 = 57367
const DEFINITIONS = 57368
const DEFVAL = 57369
const DESCRIPTION = 57370
const DISPLAY_HINT = 57371
const END = 57372
const ENTERPRISE = 57373
const EXPORTS = 57374
const EXTENDS = 57375
const FROM = 57376
const GROUP = 57377
const GAUGE32 = 57378
const IDENTIFIER = 57379
const IMPLICIT = 57380
const IMPLIED = 57381
const IMPORTS = 57382
const INCLUDES = 57383
const INDEX = 57384
const INSTALL_ERRORS = 57385
const INTEGER = 57386
const INTEGER32 = 57387
const INTEGER64 = 57388
const IPADDRESS = 57389
const LAST_UPDATED = 57390
const MACRO = 57391
const MANDATORY_GROUPS = 57392
const MAX_ACCESS = 57393
const MIN_ACCESS = 57394
const MODULE = 57395
const MODULE_COMPLIANCE = 57396
const MODULE_IDENTITY = 57397
const NOT_ACCESSIBLE = 57398
const NOTIFICATIONS = 57399
const NOTIFICATION_GROUP = 57400
const NOTIFICATION_TYPE = 57401
const OBJECT = 57402
const OBJECT_GROUP = 57403
const OBJECT_IDENTITY = 57404
const OBJECT_TYPE = 57405
const OBJECTS = 57406
const OCTET = 57407
const OF = 57408
const ORGANIZATION = 57409
const OPAQUE = 57410
const PIB_ACCESS = 57411
const PIB_DEFINITIONS = 57412
const PIB_INDEX = 57413
const PIB_MIN_ACCESS = 57414
const PIB_REFERENCES = 57415
const PIB_TAG = 57416
const POLICY_ACCESS = 57417
const PRODUCT_RELEASE = 57418
const REFERENCE = 57419
const REVISION = 57420
const SEQUENCE = 57421
const SIZE = 57422
const STATUS = 57423
const STRING = 57424
const SUBJECT_CATEGORIES = 57425
const SUPPORTS = 57426
const SYNTAX = 57427
const TEXTUAL_CONVENTION = 57428
const TIMETICKS = 57429
const TRAP_TYPE = 57430
const UNIQUENESS = 57431
const UNITS = 57432
const UNIVERSAL = 57433
const UNSIGNED32 = 57434
const UNSIGNED64 = 57435
const VALUE = 57436
const VARIABLES = 57437
const VARIATION = 57438
const WRITE_SYNTAX = 57439

var smiToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"DOT_DOT",
	"COLON_COLON_EQUAL",
	"UPPERCASE_IDENTIFIER",
	"LOWERCASE_IDENTIFIER",
	"NUMBER",
	"NEGATIVENUMBER",
	"NUMBER64",
	"NEGATIVENUMBER64",
	"BIN_STRING",
	"HEX_STRING",
	"QUOTED_STRING",
	"ACCESS",
	"AGENT_CAPABILITIES",
	"APPLICATION",
	"AUGMENTS",
	"BEGIN_",
	"BITS",
	"CHOICE",
	"CONTACT_INFO",
	"CREATION_REQUIRES",
	"COUNTER32",
	"COUNTER64",
	"DEFINITIONS",
	"DEFVAL",
	"DESCRIPTION",
	"DISPLAY_HINT",
	"END",
	"ENTERPRISE",
	"EXPORTS",
	"EXTENDS",
	"FROM",
	"GROUP",
	"GAUGE32",
	"IDENTIFIER",
	"IMPLICIT",
	"IMPLIED",
	"IMPORTS",
	"INCLUDES",
	"INDEX",
	"INSTALL_ERRORS",
	"INTEGER",
	"INTEGER32",
	"INTEGER64",
	"IPADDRESS",
	"LAST_UPDATED",
	"MACRO",
	"MANDATORY_GROUPS",
	"MAX_ACCESS",
	"MIN_ACCESS",
	"MODULE",
	"MODULE_COMPLIANCE",
	"MODULE_IDENTITY",
	"NOT_ACCESSIBLE",
	"NOTIFICATIONS",
	"NOTIFICATION_GROUP",
	"NOTIFICATION_TYPE",
	"OBJECT",
	"OBJECT_GROUP",
	"OBJECT_IDENTITY",
	"OBJECT_TYPE",
	"OBJECTS",
	"OCTET",
	"OF",
	"ORGANIZATION",
	"OPAQUE",
	"PIB_ACCESS",
	"PIB_DEFINITIONS",
	"PIB_INDEX",
	"PIB_MIN_ACCESS",
	"PIB_REFERENCES",
	"PIB_TAG",
	"POLICY_ACCESS",
	"PRODUCT_RELEASE",
	"REFERENCE",
	"REVISION",
	"SEQUENCE",
	"SIZE",
	"STATUS",
	"STRING",
	"SUBJECT_CATEGORIES",
	"SUPPORTS",
	"SYNTAX",
	"TEXTUAL_CONVENTION",
	"TIMETICKS",
	"TRAP_TYPE",
	"UNIQUENESS",
	"UNITS",
	"UNIVERSAL",
	"UNSIGNED32",
	"UNSIGNED64",
	"VALUE",
	"VARIABLES",
	"VARIATION",
	"WRITE_SYNTAX",
	"'{'",
	"'}'",
	"';'",
	"','",
	"'('",
	"')'",
	"'['",
	"']'",
	"'.'",
	"'|'",
}
var smiStatenames = [...]string{}

const smiEofCode = 1
const smiErrCode = 2
const smiInitialStackSize = 16

//line smi.y:1924

//line yacctab:1
var smiExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 28,
	30, 52,
	-2, 0,
	-1, 33,
	30, 51,
	-2, 0,
	-1, 50,
	16, 374,
	54, 339,
	58, 335,
	61, 331,
	-2, 83,
	-1, 52,
	5, 88,
	-2, 84,
	-1, 158,
	98, 190,
	102, 188,
	-2, 187,
	-1, 159,
	102, 193,
	-2, 192,
	-1, 160,
	98, 195,
	106, 50,
	-2, 109,
	-1, 169,
	102, 225,
	-2, 224,
	-1, 193,
	106, 50,
	-2, 195,
	-1, 202,
	102, 201,
	-2, 200,
}

const smiPrivate = 57344

const smiLast = 801

var smiAct = [...]int{

	282, 675, 448, 564, 618, 591, 642, 354, 612, 232,
	629, 595, 583, 146, 585, 560, 527, 447, 12, 536,
	502, 480, 233, 469, 348, 366, 424, 177, 365, 277,
	274, 259, 258, 256, 249, 229, 237, 230, 152, 81,
	208, 209, 155, 211, 161, 4, 160, 4, 201, 415,
	311, 662, 210, 312, 312, 320, 319, 589, 440, 439,
	150, 151, 438, 404, 167, 172, 608, 602, 603, 604,
	605, 606, 607, 609, 212, 27, 168, 160, 200, 678,
	651, 679, 127, 553, 158, 159, 173, 166, 621, 391,
	622, 150, 614, 372, 615, 167, 172, 575, 219, 576,
	163, 551, 442, 552, 443, 162, 313, 168, 171, 408,
	406, 409, 295, 125, 299, 158, 159, 173, 166, 165,
	342, 321, 343, 322, 109, 214, 147, 170, 308, 200,
	309, 163, 169, 174, 22, 294, 162, 295, 650, 171,
	633, 647, 298, 646, 164, 645, 632, 179, 624, 128,
	165, 588, 587, 577, 569, 554, 533, 600, 170, 532,
	531, 477, 476, 169, 174, 462, 458, 345, 144, 297,
	619, 251, 143, 206, 112, 164, 20, 672, 597, 581,
	580, 578, 567, 550, 231, 548, 542, 541, 524, 510,
	509, 497, 192, 496, 495, 449, 446, 429, 426, 394,
	303, 301, 198, 212, 223, 207, 190, 183, 228, 213,
	215, 217, 181, 199, 220, 221, 222, 8, 643, 347,
	227, 204, 546, 131, 218, 592, 489, 133, 292, 503,
	137, 382, 202, 280, 281, 198, 252, 326, 254, 253,
	427, 255, 369, 306, 268, 305, 199, 302, 307, 271,
	300, 325, 243, 180, 132, 334, 339, 257, 279, 261,
	260, 263, 262, 265, 264, 481, 349, 335, 244, 79,
	398, 304, 636, 507, 351, 329, 330, 340, 333, 296,
	240, 135, 138, 10, 539, 114, 139, 242, 508, 288,
	140, 332, 637, 470, 356, 205, 331, 358, 231, 338,
	193, 474, 182, 516, 231, 142, 522, 119, 316, 540,
	315, 118, 563, 367, 116, 117, 30, 377, 337, 317,
	318, 376, 383, 336, 341, 287, 506, 11, 361, 203,
	363, 257, 130, 357, 370, 359, 26, 362, 158, 159,
	224, 245, 110, 291, 371, 373, 375, 374, 126, 290,
	396, 34, 247, 378, 163, 18, 17, 16, 15, 162,
	400, 401, 677, 653, 590, 530, 460, 379, 450, 410,
	380, 381, 436, 390, 384, 385, 386, 387, 388, 413,
	389, 402, 407, 405, 393, 111, 368, 49, 584, 293,
	225, 565, 49, 668, 422, 403, 23, 425, 261, 260,
	263, 262, 265, 264, 431, 141, 432, 666, 433, 283,
	234, 14, 419, 420, 437, 649, 631, 421, 659, 367,
	18, 17, 16, 416, 417, 21, 630, 631, 572, 456,
	414, 360, 270, 269, 24, 670, 444, 454, 434, 658,
	355, 528, 178, 412, 278, 275, 425, 250, 238, 461,
	520, 464, 487, 272, 266, 445, 5, 579, 517, 367,
	453, 475, 492, 484, 483, 482, 441, 430, 395, 175,
	457, 129, 19, 314, 673, 463, 465, 466, 3, 661,
	472, 6, 543, 471, 187, 123, 558, 557, 498, 435,
	186, 122, 485, 452, 185, 121, 488, 499, 490, 451,
	184, 493, 120, 504, 494, 512, 513, 514, 511, 547,
	525, 523, 344, 216, 267, 197, 196, 195, 194, 353,
	529, 352, 518, 491, 566, 428, 399, 289, 176, 115,
	544, 555, 310, 455, 189, 113, 191, 188, 124, 31,
	9, 473, 549, 526, 545, 610, 611, 236, 235, 136,
	397, 561, 562, 350, 674, 556, 667, 669, 665, 641,
	640, 574, 594, 519, 501, 500, 568, 573, 570, 571,
	586, 45, 635, 638, 538, 537, 535, 534, 559, 515,
	486, 468, 467, 42, 613, 44, 561, 586, 596, 43,
	627, 617, 593, 625, 13, 364, 241, 239, 134, 616,
	623, 479, 478, 628, 626, 598, 620, 582, 521, 505,
	226, 246, 411, 418, 276, 328, 157, 327, 586, 601,
	599, 324, 149, 145, 35, 41, 40, 286, 634, 284,
	285, 392, 596, 639, 644, 423, 613, 346, 648, 459,
	39, 38, 652, 37, 654, 655, 657, 248, 656, 323,
	273, 156, 154, 36, 660, 83, 82, 153, 54, 65,
	66, 53, 48, 148, 51, 100, 46, 663, 664, 87,
	25, 671, 33, 101, 102, 676, 32, 78, 680, 77,
	29, 681, 676, 28, 86, 103, 85, 84, 80, 7,
	2, 1, 0, 0, 88, 107, 89, 0, 0, 90,
	0, 0, 0, 91, 92, 0, 0, 104, 105, 47,
	93, 94, 95, 52, 50, 0, 0, 96, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 74, 76, 0, 0, 97, 98, 106, 0, 0,
	0, 99, 108, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 67, 69, 0, 0, 0, 0, 0,
	0, 63, 55, 0, 0, 62, 58, 0, 61, 59,
	56, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 70, 57, 0, 0, 0, 73,
	68,
}
var smiPact = [...]int{

	450, -1000, 450, -1000, 119, -1000, -1000, 257, 414, 467,
	-1000, -1000, 77, 414, -1000, -1000, -1000, 32, -1000, 377,
	-1000, -1000, 426, 304, -28, 276, -1000, -1000, 707, -1000,
	649, 24, 312, 707, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 75, -1000, 225,
	252, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13, 649, -1000,
	48, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 466, 295, 135, 173, 142, 217, 147,
	221, 228, 236, 389, 256, -1000, -1000, 450, 649, 40,
	464, -1000, 435, 71, 172, 114, 254, 109, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	108, -1000, -1000, 294, -1000, -1000, -1000, -1000, -1000, -1000,
	27, -58, 150, 292, 204, 107, -24, 23, 23, -1000,
	-24, -4, 23, 23, 23, 106, 309, 362, -1000, 130,
	435, 414, 396, 441, 216, 230, 171, 192, 311, 323,
	440, 72, -1000, 27, 23, 105, 23, 105, -1000, -1000,
	251, 448, -1000, -24, 425, 424, 447, 438, -1000, -1000,
	-1000, -1000, 437, -1000, 390, -1000, 23, -1000, -1000, 177,
	-1000, -1000, -1000, 414, 414, 395, 274, 395, 361, 36,
	-1000, -1000, -1000, 212, -1000, 70, 41, -1000, 12, 169,
	103, 166, 102, 435, 395, -1000, 162, 395, 29, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -53, 4, -1000, 469,
	-1000, -1000, -1000, -1000, -1000, -1000, -24, -4, -1000, -49,
	-50, -1000, -1000, 22, -1000, 231, 21, -1000, -1000, -1000,
	68, 124, 189, -1000, 201, -1000, -1000, -1000, -1000, 433,
	-1000, -1000, -1000, 395, -1000, 414, 395, -1000, 441, 423,
	435, 414, 435, 414, 358, 161, 435, -1000, -1000, 440,
	-9, -1000, 390, 390, 390, -1000, -1000, -1000, -1000, 283,
	279, -1000, 438, -1000, -1000, -1000, -24, -1000, -1000, -24,
	-24, 149, 285, -24, -24, -24, -24, -24, -1000, -24,
	-1000, -1000, -1000, 437, -13, -1000, 356, 101, 463, 395,
	196, -1000, 433, 433, -1000, -1000, 189, -1000, 373, -1000,
	-40, 355, 11, 354, 10, -1000, -1000, -1000, 395, 436,
	351, -1000, 422, -1000, -54, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -24, -24, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 404, 189, 395, 414, 100, -1000, 159, -1000, 99,
	-1000, -1000, 462, 395, -1000, 395, -1000, 395, -1000, 414,
	-1000, 344, -1000, 395, -41, -44, -1000, -1000, -45, -1000,
	-1000, 461, -1000, 3, -1000, -1000, 414, 435, 98, 414,
	97, 340, -1000, -1000, -1000, 189, 395, -1000, -1000, -1000,
	-1000, 421, -1000, 414, 67, 338, 414, 66, -1000, 414,
	395, 189, 189, 240, -1000, 189, -1000, -1000, -1000, 258,
	395, 63, -1000, 62, 187, 460, 459, 458, 240, -1000,
	446, 189, 141, 189, -1000, -1000, -1000, -1000, 457, 187,
	-1000, 396, 96, 95, 93, -1000, -1000, 414, 145, 71,
	255, 92, 91, -1000, -1000, 414, 414, 414, 253, -1000,
	453, 145, -1000, 444, -1000, 264, -1000, 90, -1000, 434,
	414, 337, 61, 60, 57, 249, 89, 88, -1000, -1000,
	414, 133, -1000, 87, 414, 85, 2, -1000, -19, 56,
	395, -1000, -1000, -1000, -1000, 249, -1000, -1000, -1000, -1000,
	-1000, 414, 414, 271, -1000, 364, -1000, 84, 414, 55,
	414, -1000, 434, 420, -1000, -1000, -1000, 414, 414, -2,
	-1000, -1000, 54, 83, 452, 82, 81, 349, 53, -1000,
	52, -1000, -46, 336, 140, -1000, 414, -1000, 414, 80,
	59, 414, -7, -1000, 414, -1000, -1000, -1000, -1000, -1000,
	395, 73, 71, -1000, -11, -1000, -1000, 414, 49, -1000,
	419, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	47, 39, -1000, -1000, -1000, 349, -1000, -1000, 220, 71,
	-1000, 122, 414, 46, -1000, 44, 42, 408, 37, -1000,
	-22, -1000, -1000, 414, -1000, 335, 433, 433, -1000, -1000,
	-1000, 122, -1000, 414, -1000, -1000, -1000, -1000, -1000, -22,
	432, 410, -1000, 395, -1000, -1000, -1000, -1000, -1000, -52,
	-1000, 140, -1000, 73, 392, 370, 428, 364, 79, -1000,
	-1000, -1000, 414, 334, -20, -1000, -1000, 395, -1000, 414,
	-1000, -1000,
}
var smiPgo = [...]int{

	0, 691, 690, 478, 689, 44, 39, 688, 687, 686,
	684, 683, 680, 679, 677, 269, 676, 672, 351, 670,
	666, 664, 663, 662, 661, 660, 659, 658, 657, 358,
	653, 652, 42, 651, 650, 30, 13, 649, 647, 34,
	643, 641, 640, 639, 637, 635, 26, 631, 630, 629,
	627, 626, 625, 624, 623, 622, 621, 620, 38, 619,
	617, 616, 615, 40, 41, 52, 33, 32, 31, 43,
	614, 29, 613, 27, 612, 611, 610, 7, 609, 608,
	607, 12, 14, 17, 3, 605, 604, 603, 2, 25,
	24, 602, 601, 21, 598, 597, 35, 37, 596, 595,
	28, 0, 22, 9, 594, 411, 593, 590, 10, 589,
	585, 583, 582, 581, 23, 580, 579, 578, 15, 577,
	576, 19, 575, 574, 5, 4, 573, 572, 571, 565,
	564, 20, 563, 562, 11, 560, 559, 6, 558, 557,
	556, 554, 1, 553, 550, 549, 548, 547, 36, 8,
	546, 545, 544, 16, 543, 541, 540, 539, 538, 537,
	536, 535, 534, 533, 532, 529, 528, 527, 526, 525,
	524, 523, 521, 519, 518, 517, 516, 515, 514, 513,
	512, 511, 510, 509, 508, 502, 500, 499, 495, 494,
	493, 491, 490, 489, 488, 487, 486, 485, 484, 483,
	482, 479, 474,
}
var smiR1 = [...]int{

	0, 1, 1, 2, 2, 3, 4, 4, 156, 156,
	11, 11, 12, 19, 157, 19, 13, 13, 14, 14,
	15, 7, 7, 6, 6, 6, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 9, 9, 9, 9, 9, 9, 9, 10, 10,
	5, 16, 16, 17, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 158, 159,
	20, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 160, 22, 29, 29, 30, 161, 53, 23, 23,
	23, 24, 24, 26, 26, 26, 26, 26, 25, 25,
	25, 27, 27, 54, 162, 163, 54, 54, 31, 32,
	33, 34, 34, 35, 36, 36, 37, 37, 37, 38,
	38, 164, 39, 40, 41, 43, 43, 165, 166, 42,
	44, 44, 45, 45, 46, 47, 47, 49, 49, 49,
	50, 167, 167, 168, 143, 143, 169, 144, 144, 170,
	152, 152, 151, 151, 150, 150, 149, 171, 155, 155,
	154, 154, 153, 172, 48, 173, 48, 51, 52, 145,
	145, 146, 147, 147, 148, 148, 55, 55, 55, 55,
	55, 55, 28, 28, 56, 56, 57, 58, 174, 58,
	175, 58, 58, 176, 58, 177, 58, 58, 58, 58,
	58, 178, 58, 58, 58, 58, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 60, 60, 60, 60, 61,
	61, 61, 61, 61, 61, 179, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 63, 63, 63, 63, 64,
	65, 66, 66, 67, 67, 68, 68, 68, 68, 68,
	68, 69, 70, 70, 180, 71, 72, 72, 73, 74,
	75, 75, 76, 76, 77, 181, 78, 78, 182, 78,
	78, 183, 79, 79, 80, 80, 81, 81, 82, 83,
	84, 84, 85, 85, 86, 86, 87, 87, 88, 89,
	90, 90, 91, 91, 92, 92, 184, 93, 94, 94,
	95, 96, 96, 97, 98, 99, 99, 100, 101, 102,
	103, 104, 104, 105, 105, 105, 106, 107, 107, 108,
	108, 185, 186, 187, 109, 188, 189, 190, 110, 191,
	192, 193, 111, 112, 113, 113, 194, 114, 115, 115,
	115, 116, 116, 117, 117, 118, 119, 119, 120, 120,
	121, 121, 195, 122, 196, 123, 124, 124, 125, 125,
	126, 127, 127, 127, 197, 198, 199, 128, 129, 129,
	130, 130, 200, 131, 133, 133, 134, 132, 132, 135,
	135, 136, 136, 201, 202, 137, 138, 138, 139, 140,
	140, 141, 141, 142,
}
var smiR2 = [...]int{

	0, 1, 0, 1, 2, 9, 3, 0, 1, 1,
	1, 0, 3, 0, 0, 3, 1, 0, 1, 2,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 0, 0,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 1, 1, 7, 0, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 11, 1, 3, 1,
	4, 1, 3, 2, 1, 4, 1, 1, 2, 1,
	3, 0, 5, 11, 21, 0, 2, 0, 0, 11,
	4, 0, 1, 3, 1, 2, 0, 1, 1, 0,
	2, 1, 1, 0, 5, 0, 0, 5, 0, 0,
	5, 0, 1, 0, 1, 3, 1, 0, 5, 0,
	1, 3, 4, 0, 3, 0, 3, 12, 16, 4,
	0, 1, 1, 3, 1, 4, 1, 2, 1, 1,
	1, 1, 5, 5, 1, 1, 1, 1, 0, 3,
	0, 3, 1, 0, 3, 0, 3, 4, 2, 4,
	2, 0, 4, 2, 4, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 3, 2,
	1, 2, 1, 2, 1, 0, 3, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 0, 3,
	6, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 0, 5, 1, 1, 1, 1,
	2, 0, 2, 0, 1, 0, 5, 4, 0, 5,
	0, 0, 5, 0, 1, 3, 2, 1, 1, 1,
	4, 0, 1, 3, 1, 0, 1, 3, 1, 1,
	2, 0, 1, 0, 1, 2, 0, 5, 4, 0,
	4, 1, 3, 1, 4, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 1, 4, 1, 1, 2, 4,
	1, 0, 0, 0, 15, 0, 0, 0, 15, 0,
	0, 0, 15, 1, 1, 2, 0, 5, 2, 1,
	0, 4, 0, 1, 3, 1, 1, 0, 1, 2,
	1, 1, 0, 5, 0, 8, 2, 0, 2, 0,
	1, 2, 2, 0, 0, 0, 0, 17, 1, 0,
	1, 2, 0, 8, 1, 3, 1, 2, 1, 1,
	0, 1, 2, 0, 0, 11, 2, 0, 1, 4,
	0, 1, 3, 1,
}
var smiChk = [...]int{

	-1000, -1, -2, -3, -5, 6, -3, -4, 98, -156,
	26, 70, -103, -104, -105, -29, 8, 7, 6, 5,
	99, -105, 102, 19, 8, -19, 32, 103, -11, -12,
	40, -157, -16, -17, -18, -53, -30, -40, -41, -42,
	-51, -52, -111, -109, -110, -128, -20, 2, -23, -29,
	7, -21, 6, -24, -27, 55, 63, 88, 59, 62,
	86, 61, 58, 54, 16, -26, -25, 46, 93, 47,
	87, 68, 45, 92, 24, 36, 25, -13, -14, -15,
	-7, -6, 7, 6, -8, -9, -10, 20, 45, 47,
	50, 54, 55, 61, 62, 63, 68, 86, 87, 92,
	16, 24, 25, 36, 58, 59, 88, 46, 93, 100,
	30, -18, 99, -161, 60, -165, 62, 63, 59, 55,
	-185, -188, -191, -197, -158, 100, -15, 34, 101, 5,
	37, 88, 81, 85, -94, 64, -145, 83, 61, 58,
	54, 16, 49, -5, -6, -54, -36, 86, -22, -55,
	20, 21, -58, -28, -31, -32, -33, -61, 44, 45,
	6, -5, 65, 60, 104, 79, 47, 24, 36, 92,
	87, 68, 25, 46, 93, 5, -166, -73, 7, -36,
	81, 98, 48, 98, -186, -189, -192, -198, -159, -162,
	98, -160, -58, 6, -174, -175, -176, -177, -64, -65,
	102, 106, 82, 37, 17, 91, 66, 98, -63, -64,
	-65, -69, 98, -64, 102, -64, -179, -63, -65, 102,
	-64, -64, -64, 98, 31, 28, -76, 90, -73, -96,
	-97, -88, -103, -102, 14, -146, -147, -148, 7, -95,
	64, -98, 57, 81, 76, 30, -75, 29, -38, -39,
	7, 99, -64, -69, -64, -69, -66, 80, -67, -68,
	9, 8, 11, 10, 13, 12, 6, -178, -63, 8,
	8, -32, 6, -34, -35, 7, -70, -71, 7, -64,
	-103, -103, -101, 14, -49, -48, -50, 51, 15, -167,
	75, 69, -101, 28, 99, 101, 67, 99, 101, 102,
	81, 98, 81, 98, -73, -101, 81, -101, 99, 101,
	-164, 103, 107, 102, 4, -69, -64, -65, -65, 105,
	105, 99, 101, -37, -56, 20, 6, -60, -62, 44,
	45, 65, 60, 47, 24, 36, 92, 87, 68, 25,
	46, 93, 99, 101, -180, 99, -44, 95, -90, 77,
	-143, 73, -172, -173, -77, 7, -101, -97, -101, -148,
	8, -73, -96, -73, -99, -100, -89, -103, 28, 81,
	-73, -39, 102, -67, -66, -68, 38, 38, -35, -63,
	-63, -63, 82, 37, -63, -63, -63, -63, -63, -63,
	-71, 102, -47, 28, 98, 5, -101, -144, 74, -168,
	-77, -77, -90, 22, 103, 28, 99, 28, 99, 101,
	-101, -74, 7, 28, 8, 103, -63, -63, -72, 8,
	9, -90, -101, -45, -46, -88, 98, 81, -169, 98,
	5, -101, -101, -101, -100, -193, 28, -101, 103, 103,
	103, 5, 99, 101, -103, -73, 98, -83, -88, 98,
	28, -187, -190, -90, -101, -163, 8, -46, 99, -43,
	28, -88, 99, -89, -101, -90, -90, -112, -113, -114,
	53, -199, -90, -155, 43, -101, 99, 99, -91, -92,
	-93, 78, 5, 5, 5, -114, -115, 6, -90, 85,
	-90, -171, 5, -93, -102, 98, 98, 98, -194, -103,
	-129, -130, -131, 84, -36, -78, 71, 18, 33, 98,
	98, -184, -103, -103, -103, -116, 50, 5, -131, -132,
	6, -79, 42, -181, 98, -182, -154, -153, 7, -103,
	28, 99, 99, 99, -119, -120, -121, -122, -123, 35,
	60, 98, 98, -200, -103, -152, 89, -183, 98, -83,
	98, 99, 101, 102, 99, -101, -121, -195, -196, -117,
	-118, -103, -103, 41, -84, 27, -170, 98, -83, 99,
	-83, -153, 8, -103, -88, 99, 101, 99, 98, 5,
	98, 98, -80, -81, 39, -82, -88, 99, 99, 103,
	28, -124, 85, -118, -133, -134, -103, 98, -85, -57,
	98, -59, 8, 9, 10, 11, 12, 13, 7, 14,
	-151, -150, -149, -88, 99, 101, -82, -101, -125, 97,
	-36, 99, 101, -88, 99, -106, -86, -107, -87, -108,
	7, 8, 99, 101, -81, -127, 52, 72, -126, -36,
	-135, -136, -137, 96, -134, 99, 99, 99, -108, 7,
	101, 102, -149, 28, -77, -77, -137, -88, 7, 8,
	-101, -201, 103, -124, -125, -138, 15, -140, 23, -139,
	7, -84, 98, -202, -141, -142, -88, 28, 99, 101,
	-101, -142,
}
var smiDef = [...]int{

	2, -2, 1, 3, 7, 50, 4, 0, 0, 0,
	8, 9, 0, 320, 321, 323, 324, 83, 84, 0,
	6, 322, 0, 13, 0, 11, 14, 325, -2, 10,
	17, 0, 0, -2, 53, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 0, 86, 127,
	-2, 68, -2, 89, 90, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 91, 92, 101, 102, 93,
	94, 95, 96, 97, 98, 99, 100, 0, 16, 18,
	0, 21, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 15,
	5, 54, 67, 0, 0, 0, 0, 0, 309, 170,
	0, 0, 0, 0, 0, 12, 19, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 332, 336,
	340, 375, 69, 20, 22, 87, 103, 104, 107, 114,
	0, 81, 176, 0, 178, 179, 180, 181, -2, -2,
	-2, 0, 0, 0, 0, 0, 248, 220, 222, -2,
	248, 228, 230, 232, 234, 0, 0, 0, 268, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 177, -2, 0, 0, 0, 0, 198, 203,
	0, 0, -2, 248, 0, 0, 0, 0, 219, 245,
	246, 247, 0, 221, 0, 223, 0, 227, 229, 0,
	231, 233, 235, 0, 0, 0, 139, 0, 0, 0,
	311, 313, 298, 0, 319, 0, 171, 172, 174, 0,
	0, 0, 0, 0, 0, 70, 0, 0, 0, 119,
	121, 82, 189, 191, 194, 196, 0, 0, 251, 253,
	255, 256, 257, 258, 259, 260, 0, 0, 205, 0,
	0, 108, 109, 0, 111, 0, 0, 262, 264, 226,
	0, 131, 301, 318, 145, 137, 138, 163, 165, 0,
	141, 142, 272, 0, 308, 0, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 115, 0,
	0, 249, 0, 0, 0, 197, 199, 204, 202, 0,
	0, 110, 0, 113, 116, 117, 248, 184, 185, 248,
	248, 0, 0, 248, 248, 248, 248, 248, 241, 248,
	243, 244, 261, 0, 0, 85, 136, 0, 0, 0,
	148, 143, 0, 0, 140, 274, 301, 312, 0, 173,
	0, 0, 0, 0, 0, 315, 317, 299, 0, 0,
	0, 120, 0, 252, 0, 254, 182, 183, 112, 118,
	215, 216, 248, 248, 236, 237, 238, 239, 240, 242,
	263, 0, 301, 0, 0, 0, 300, 0, 146, 0,
	164, 166, 0, 0, 175, 0, 310, 0, 314, 0,
	341, 0, 269, 0, 0, 0, 217, 218, 0, 266,
	267, 0, 135, 0, 132, 134, 0, 0, 0, 0,
	0, 0, 333, 337, 316, 301, 0, 105, 122, 250,
	265, 0, 130, 0, 0, 125, 0, 0, 289, 0,
	0, 301, 301, 0, 376, 301, 129, 133, 123, 159,
	0, 0, 144, 0, 303, 0, 0, 0, 343, 344,
	350, 301, 0, 301, 157, 126, 147, 167, 0, 302,
	304, 0, 0, 0, 0, 345, 346, 349, 379, 0,
	280, 0, 0, 305, 306, 0, 0, 0, 352, 348,
	0, 378, 380, 0, 106, 283, 275, 0, 278, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 381, 382,
	388, 151, 281, 0, 0, 0, 0, 160, 0, 0,
	0, 334, 338, 342, 347, 356, 358, 360, 361, 362,
	364, 0, 0, 0, 387, 291, 149, 0, 0, 0,
	0, 158, 0, 0, 168, 307, 359, 0, 0, 0,
	353, 355, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 161, 0, 0, 367, 351, 0, 377, 0, 0,
	0, 153, 0, 284, 0, 287, 288, 276, 279, 162,
	0, 369, 0, 354, 0, 384, 386, 0, 0, 292,
	295, 186, 206, 207, 208, 209, 210, 211, 212, 213,
	0, 152, 154, 156, 282, 0, 286, 363, 373, 0,
	366, 390, 0, 0, 290, 0, 0, 326, 294, 327,
	296, 330, 150, 0, 285, 0, 0, 0, 368, 370,
	383, 389, 391, 0, 385, 124, 214, 293, 328, 0,
	0, 0, 155, 0, 371, 372, 392, 393, 297, 0,
	365, 367, 329, 369, 397, 400, 0, 291, 0, 396,
	398, 394, 0, 0, 0, 401, 403, 0, 399, 0,
	395, 402,
}
var smiTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	102, 103, 3, 3, 101, 3, 106, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 100,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 104, 3, 105, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 98, 107, 99,
}
var smiTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97,
}
var smiTok3 = [...]int{
	0,
}

var smiErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	smiDebug        = 0
	smiErrorVerbose = false
)

type smiLexer interface {
	Lex(lval *smiSymType) int
	Error(s string)
}

type smiParser interface {
	Parse(smiLexer) int
	Lookahead() int
}

type smiParserImpl struct {
	lval  smiSymType
	stack [smiInitialStackSize]smiSymType
	char  int
}

func (p *smiParserImpl) Lookahead() int {
	return p.char
}

func smiNewParser() smiParser {
	return &smiParserImpl{}
}

const smiFlag = -1000

func smiTokname(c int) string {
	if c >= 1 && c-1 < len(smiToknames) {
		if smiToknames[c-1] != "" {
			return smiToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func smiStatname(s int) string {
	if s >= 0 && s < len(smiStatenames) {
		if smiStatenames[s] != "" {
			return smiStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func smiErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !smiErrorVerbose {
		return "syntax error"
	}

	for _, e := range smiErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + smiTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := smiPact[state]
	for tok := TOKSTART; tok-1 < len(smiToknames); tok++ {
		if n := base + tok; n >= 0 && n < smiLast && smiChk[smiAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if smiDef[state] == -2 {
		i := 0
		for smiExca[i] != -1 || smiExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; smiExca[i] >= 0; i += 2 {
			tok := smiExca[i]
			if tok < TOKSTART || smiExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if smiExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += smiTokname(tok)
	}
	return res
}

func smilex1(lex smiLexer, lval *smiSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = smiTok1[0]
		goto out
	}
	if char < len(smiTok1) {
		token = smiTok1[char]
		goto out
	}
	if char >= smiPrivate {
		if char < smiPrivate+len(smiTok2) {
			token = smiTok2[char-smiPrivate]
			goto out
		}
	}
	for i := 0; i < len(smiTok3); i += 2 {
		token = smiTok3[i+0]
		if token == char {
			token = smiTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = smiTok2[1] /* unknown char */
	}
	if smiDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", smiTokname(token), uint(char))
	}
	return char, token
}

func smiParse(smilex smiLexer) int {
	return smiNewParser().Parse(smilex)
}

func (smircvr *smiParserImpl) Parse(smilex smiLexer) int {
	var smin int
	var smiVAL smiSymType
	var smiDollar []smiSymType
	_ = smiDollar // silence set and not used
	smiS := smircvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	smistate := 0
	smircvr.char = -1
	smitoken := -1 // smircvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		smistate = -1
		smircvr.char = -1
		smitoken = -1
	}()
	smip := -1
	goto smistack

ret0:
	return 0

ret1:
	return 1

smistack:
	/* put a state and value onto the stack */
	if smiDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", smiTokname(smitoken), smiStatname(smistate))
	}

	smip++
	if smip >= len(smiS) {
		nyys := make([]smiSymType, len(smiS)*2)
		copy(nyys, smiS)
		smiS = nyys
	}
	smiS[smip] = smiVAL
	smiS[smip].yys = smistate

sminewstate:
	smin = smiPact[smistate]
	if smin <= smiFlag {
		goto smidefault /* simple state */
	}
	if smircvr.char < 0 {
		smircvr.char, smitoken = smilex1(smilex, &smircvr.lval)
	}
	smin += smitoken
	if smin < 0 || smin >= smiLast {
		goto smidefault
	}
	smin = smiAct[smin]
	if smiChk[smin] == smitoken { /* valid shift */
		smircvr.char = -1
		smitoken = -1
		smiVAL = smircvr.lval
		smistate = smin
		if Errflag > 0 {
			Errflag--
		}
		goto smistack
	}

smidefault:
	/* default state action */
	smin = smiDef[smistate]
	if smin == -2 {
		if smircvr.char < 0 {
			smircvr.char, smitoken = smilex1(smilex, &smircvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if smiExca[xi+0] == -1 && smiExca[xi+1] == smistate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			smin = smiExca[xi+0]
			if smin < 0 || smin == smitoken {
				break
			}
		}
		smin = smiExca[xi+1]
		if smin < 0 {
			goto ret0
		}
	}
	if smin == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			smilex.Error(smiErrorMessage(smistate, smitoken))
			Nerrs++
			if smiDebug >= 1 {
				__yyfmt__.Printf("%s", smiStatname(smistate))
				__yyfmt__.Printf(" saw %s\n", smiTokname(smitoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for smip >= 0 {
				smin = smiPact[smiS[smip].yys] + smiErrCode
				if smin >= 0 && smin < smiLast {
					smistate = smiAct[smin] /* simulate a shift of "error" */
					if smiChk[smistate] == smiErrCode {
						goto smistack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if smiDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", smiS[smip].yys)
				}
				smip--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if smiDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", smiTokname(smitoken))
			}
			if smitoken == smiEofCode {
				goto ret1
			}
			smircvr.char = -1
			smitoken = -1
			goto sminewstate /* try again in the same state */
		}
	}

	/* reduction by production smin */
	if smiDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", smin, smiStatname(smistate))
	}

	smint := smin
	smipt := smip
	_ = smipt // guard against "declared and not used"

	smip -= smiR2[smin]
	// smip is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if smip+1 >= len(smiS) {
		nyys := make([]smiSymType, len(smiS)*2)
		copy(nyys, smiS)
		smiS = nyys
	}
	smiVAL = smiS[smip+1]

	/* consult goto table to find next state */
	smin = smiR1[smin]
	smig := smiPgo[smin]
	smij := smig + smiS[smip].yys + 1

	if smij >= smiLast {
		smistate = smiAct[smig]
	} else {
		smistate = smiAct[smij]
		if smiChk[smistate] != -smin {
			smistate = smiAct[smig]
		}
	}
	// dummy call; replaced with literal code
	switch smint {

	case 2:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:359
		{
		}
	case 4:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:364
		{
		}
	case 5:
		smiDollar = smiS[smipt-9 : smipt+1]
//line smi.y:379
		{
			m := Module{Name: smiDollar[1].id, Imports: smiDollar[7].impList, Nodes: smiDollar[8].nodeList}
			setModule(&smilex, &m)
		}
	case 6:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:386
		{
		}
	case 7:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:388
		{
		}
	case 8:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:392
		{
		}
	case 9:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:394
		{
		}
	case 11:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:402
		{
			smiVAL.impList = []Import{}
		}
	case 12:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:408
		{
			smiVAL.impList = smiDollar[2].impList
		}
	case 13:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:414
		{
		}
	case 14:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:416
		{
		}
	case 15:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:419
		{
		}
	case 17:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:424
		{
			smiVAL.impList = []Import{}
		}
	case 18:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:430
		{
			smiVAL.impList = []Import{smiDollar[1].imp}
		}
	case 19:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:434
		{
			smiVAL.impList = append(smiDollar[1].impList, smiDollar[2].imp)
		}
	case 20:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:442
		{
			smiVAL.imp = Import{From: smiDollar[3].id, Symbols: smiDollar[1].idList}
		}
	case 21:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:448
		{
			smiVAL.idList = []string{smiDollar[1].id}
		}
	case 22:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:452
		{
			smiVAL.idList = append(smiDollar[1].idList, smiDollar[3].id)
		}
	case 26:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:470
		{
		}
	case 27:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:472
		{
		}
	case 51:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:509
		{
		}
	case 52:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:511
		{
		}
	case 53:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:515
		{
			if smiDollar[1].node.Type != NodeNotSupported {
				smiVAL.nodeList = []Node{smiDollar[1].node}
			} else {
				smiVAL.nodeList = []Node{}
			}
		}
	case 54:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:523
		{
			if smiDollar[2].node.Type != NodeNotSupported {
				smiVAL.nodeList = append(smiDollar[1].nodeList, smiDollar[2].node)
			}
		}
	case 55:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:531
		{
		}
	case 56:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:534
		{
		}
	case 57:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:537
		{
		}
	case 58:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:540
		{
		}
	case 59:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:543
		{
		}
	case 60:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:546
		{
		}
	case 61:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:549
		{
		}
	case 62:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:552
		{
		}
	case 63:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:555
		{
		}
	case 64:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:558
		{
		}
	case 65:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:561
		{
		}
	case 66:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:564
		{
		}
	case 67:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:567
		{
		}
	case 68:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:577
		{
		}
	case 69:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:580
		{
		}
	case 70:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:584
		{
		}
	case 71:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:588
		{
			smiVAL.id = smiDollar[1].id
		}
	case 72:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:589
		{
			smiVAL.id = smiDollar[1].id
		}
	case 73:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:590
		{
			smiVAL.id = smiDollar[1].id
		}
	case 74:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:591
		{
			smiVAL.id = smiDollar[1].id
		}
	case 75:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:592
		{
			smiVAL.id = smiDollar[1].id
		}
	case 76:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:593
		{
			smiVAL.id = smiDollar[1].id
		}
	case 77:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:594
		{
			smiVAL.id = smiDollar[1].id
		}
	case 78:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:595
		{
			smiVAL.id = smiDollar[1].id
		}
	case 79:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:596
		{
			smiVAL.id = smiDollar[1].id
		}
	case 80:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:597
		{
			smiVAL.id = smiDollar[1].id
		}
	case 81:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:601
		{
		}
	case 82:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:605
		{
		}
	case 83:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:613
		{
		}
	case 84:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:617
		{
		}
	case 85:
		smiDollar = smiS[smipt-7 : smipt+1]
//line smi.y:625
		{
			smiVAL.node = Node{Label: smiDollar[1].id, Type: NodeObjectID, IDs: smiDollar[6].subidList}
		}
	case 86:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:634
		{
		}
	case 87:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:637
		{
		}
	case 88:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:642
		{
		}
	case 89:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:645
		{
		}
	case 90:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:648
		{
		}
	case 92:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:654
		{
		}
	case 103:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:675
		{
		}
	case 104:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:678
		{
		}
	case 105:
		smiDollar = smiS[smipt-7 : smipt+1]
//line smi.y:683
		{
		}
	case 106:
		smiDollar = smiS[smipt-11 : smipt+1]
//line smi.y:687
		{
		}
	case 107:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:690
		{
		}
	case 108:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:696
		{
		}
	case 109:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:706
		{
		}
	case 110:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:712
		{
		}
	case 111:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:717
		{
		}
	case 112:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:720
		{
		}
	case 113:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:731
		{
		}
	case 114:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:736
		{
		}
	case 115:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:739
		{
		}
	case 116:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:745
		{
		}
	case 117:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:748
		{
		}
	case 118:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:751
		{
		}
	case 119:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:756
		{
		}
	case 120:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:759
		{
		}
	case 121:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:764
		{
		}
	case 122:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:767
		{
		}
	case 123:
		smiDollar = smiS[smipt-11 : smipt+1]
//line smi.y:778
		{
			smiVAL.node = Node{Label: smiDollar[1].id, Type: NodeObjectID, IDs: smiDollar[10].subidList}
		}
	case 124:
		smiDollar = smiS[smipt-21 : smipt+1]
//line smi.y:799
		{
			smiVAL.node = Node{Label: smiDollar[1].id, Type: NodeObjectType, IDs: smiDollar[20].subidList}
		}
	case 125:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:805
		{
		}
	case 126:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:808
		{
		}
	case 127:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:813
		{
		}
	case 128:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:816
		{
		}
	case 129:
		smiDollar = smiS[smipt-11 : smipt+1]
//line smi.y:823
		{
		}
	case 130:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:828
		{
		}
	case 131:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:831
		{
		}
	case 132:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:836
		{
		}
	case 133:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:839
		{
		}
	case 134:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:844
		{
		}
	case 135:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:849
		{
		}
	case 136:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:852
		{
		}
	case 137:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:856
		{
		}
	case 138:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:859
		{
		}
	case 139:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:862
		{
		}
	case 140:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:866
		{
		}
	case 141:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:870
		{
		}
	case 142:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:873
		{
		}
	case 143:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:877
		{
		}
	case 144:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:880
		{
		}
	case 145:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:882
		{
		}
	case 146:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:886
		{
		}
	case 147:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:889
		{
		}
	case 148:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:891
		{
		}
	case 149:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:896
		{
		}
	case 150:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:899
		{
		}
	case 151:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:901
		{
		}
	case 152:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:905
		{
		}
	case 153:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:907
		{
		}
	case 154:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:911
		{
		}
	case 155:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:914
		{
		}
	case 156:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:919
		{
		}
	case 157:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:923
		{
		}
	case 158:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:926
		{
		}
	case 159:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:928
		{
		}
	case 160:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:932
		{
		}
	case 161:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:935
		{
		}
	case 162:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:940
		{
		}
	case 163:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:946
		{
		}
	case 164:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:949
		{
		}
	case 165:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:951
		{
		}
	case 166:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:954
		{
		}
	case 167:
		smiDollar = smiS[smipt-12 : smipt+1]
//line smi.y:965
		{
			smiVAL.node = Node{Label: smiDollar[1].id, Type: NodeNotification, IDs: smiDollar[11].subidList}
		}
	case 168:
		smiDollar = smiS[smipt-16 : smipt+1]
//line smi.y:980
		{
			smiVAL.node = Node{Label: smiDollar[1].id, Type: NodeModuleID, IDs: smiDollar[15].subidList}
		}
	case 169:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:986
		{
		}
	case 170:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:989
		{
		}
	case 171:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:994
		{
		}
	case 172:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:999
		{
		}
	case 173:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1002
		{
		}
	case 174:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1007
		{
		}
	case 175:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1010
		{
		}
	case 176:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1015
		{
		}
	case 177:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1018
		{
		}
	case 178:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1021
		{
		}
	case 179:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1024
		{
		}
	case 180:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1027
		{
		}
	case 181:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1030
		{
		}
	case 182:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1035
		{
		}
	case 183:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1037
		{
		}
	case 184:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1045
		{
		}
	case 185:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1047
		{
		}
	case 186:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1052
		{
		}
	case 187:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1061
		{
		}
	case 188:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1064
		{
		}
	case 189:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1067
		{
		}
	case 190:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1070
		{
		}
	case 191:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1073
		{
		}
	case 192:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1076
		{
		}
	case 193:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1079
		{
		}
	case 194:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1082
		{
		}
	case 195:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1085
		{
		}
	case 196:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1088
		{
		}
	case 197:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1091
		{
		}
	case 198:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1094
		{
		}
	case 199:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1097
		{
		}
	case 200:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1100
		{
		}
	case 201:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1103
		{
		}
	case 202:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1106
		{
		}
	case 203:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1109
		{
		}
	case 204:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1112
		{
		}
	case 205:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1115
		{
		}
	case 206:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1121
		{
		}
	case 207:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1124
		{
		}
	case 208:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1127
		{
		}
	case 209:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1130
		{
		}
	case 210:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1133
		{
		}
	case 211:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1136
		{
		}
	case 212:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1139
		{
		}
	case 213:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1142
		{
		}
	case 214:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1161
		{
		}
	case 215:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1170
		{
		}
	case 216:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1173
		{
		}
	case 217:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1176
		{
		}
	case 218:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1179
		{
		}
	case 219:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1184
		{
		}
	case 220:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1187
		{
		}
	case 221:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1190
		{
		}
	case 222:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1193
		{
		}
	case 223:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1196
		{
		}
	case 224:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1199
		{
		}
	case 225:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1202
		{
		}
	case 226:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1205
		{
		}
	case 227:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1208
		{
		}
	case 228:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1211
		{
		}
	case 229:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1214
		{
		}
	case 230:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1217
		{
		}
	case 231:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1220
		{
		}
	case 232:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1223
		{
		}
	case 233:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1226
		{
		}
	case 234:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1229
		{
		}
	case 235:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1232
		{
		}
	case 236:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1241
		{
		}
	case 237:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1244
		{
		}
	case 238:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1247
		{
		}
	case 239:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1250
		{
		}
	case 240:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1253
		{
		}
	case 241:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1256
		{
		}
	case 242:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1259
		{
		}
	case 243:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1262
		{
		}
	case 244:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1265
		{
		}
	case 245:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1270
		{
		}
	case 246:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1273
		{
		}
	case 247:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1276
		{
		}
	case 248:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1279
		{
		}
	case 249:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1292
		{
		}
	case 250:
		smiDollar = smiS[smipt-6 : smipt+1]
//line smi.y:1302
		{
		}
	case 251:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1307
		{
		}
	case 252:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1310
		{
		}
	case 253:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1315
		{
		}
	case 254:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1318
		{
		}
	case 255:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1323
		{
		}
	case 256:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1326
		{
		}
	case 257:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1329
		{
		}
	case 258:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1332
		{
		}
	case 259:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1335
		{
		}
	case 260:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1338
		{
		}
	case 261:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1343
		{
		}
	case 262:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1348
		{
		}
	case 263:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1351
		{
		}
	case 264:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1356
		{
		}
	case 265:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1359
		{
		}
	case 266:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1364
		{
		}
	case 267:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1367
		{
		}
	case 268:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1372
		{
		}
	case 269:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1377
		{
		}
	case 270:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1382
		{
		}
	case 271:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1385
		{
		}
	case 272:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1390
		{
		}
	case 273:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1393
		{
		}
	case 274:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1398
		{
		}
	case 275:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1403
		{
		}
	case 276:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1406
		{
		}
	case 277:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1409
		{
		}
	case 278:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1412
		{
		}
	case 279:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1415
		{
		}
	case 280:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1418
		{
		}
	case 281:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1423
		{
		}
	case 282:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1426
		{
		}
	case 283:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1429
		{
		}
	case 284:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1434
		{
		}
	case 285:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1437
		{
		}
	case 286:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1442
		{
		}
	case 287:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1445
		{
		}
	case 288:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1450
		{
		}
	case 289:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1455
		{
		}
	case 290:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1460
		{
		}
	case 291:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1463
		{
		}
	case 292:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1467
		{
		}
	case 293:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1469
		{
		}
	case 294:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1474
		{
		}
	case 295:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1476
		{
		}
	case 296:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1480
		{
		}
	case 297:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1483
		{
		}
	case 298:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1488
		{
		}
	case 299:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1493
		{
		}
	case 300:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1498
		{
		}
	case 301:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1501
		{
		}
	case 302:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1505
		{
		}
	case 303:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1507
		{
		}
	case 304:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1511
		{
		}
	case 305:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1513
		{
		}
	case 306:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1517
		{
		}
	case 307:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1520
		{
		}
	case 308:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1525
		{
		}
	case 309:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1528
		{
		}
	case 310:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1533
		{
		}
	case 311:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1538
		{
		}
	case 312:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1541
		{
		}
	case 313:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1546
		{
		}
	case 314:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1551
		{
		}
	case 315:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1556
		{
		}
	case 316:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1559
		{
		}
	case 317:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1564
		{
		}
	case 318:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1569
		{
		}
	case 319:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1574
		{
		}
	case 320:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1579
		{
		}
	case 321:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1585
		{
			smiVAL.subidList = []SubID{smiDollar[1].subid}
		}
	case 322:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1590
		{
			smiVAL.subidList = append(smiDollar[1].subidList, smiDollar[2].subid)
		}
	case 323:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1598
		{
			smiVAL.subid = SubID{ID: -1, Label: smiDollar[1].id}
		}
	case 324:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1602
		{
			smiVAL.subid = SubID{ID: int(smiDollar[1].unsigned32)}
		}
	case 325:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1606
		{
			smiVAL.subid = SubID{int(smiDollar[3].unsigned32), smiDollar[1].id}
		}
	case 326:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1612
		{
		}
	case 327:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1616
		{
		}
	case 328:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1618
		{
		}
	case 329:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1622
		{
		}
	case 330:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1624
		{
		}
	case 331:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1628
		{
		}
	case 332:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1631
		{
		}
	case 333:
		smiDollar = smiS[smipt-9 : smipt+1]
//line smi.y:1636
		{
		}
	case 334:
		smiDollar = smiS[smipt-15 : smipt+1]
//line smi.y:1640
		{
		}
	case 335:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1645
		{
		}
	case 336:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1648
		{
		}
	case 337:
		smiDollar = smiS[smipt-9 : smipt+1]
//line smi.y:1653
		{
		}
	case 338:
		smiDollar = smiS[smipt-15 : smipt+1]
//line smi.y:1657
		{
		}
	case 339:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1662
		{
		}
	case 340:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1665
		{
		}
	case 341:
		smiDollar = smiS[smipt-8 : smipt+1]
//line smi.y:1669
		{
		}
	case 342:
		smiDollar = smiS[smipt-15 : smipt+1]
//line smi.y:1674
		{
		}
	case 343:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1679
		{
		}
	case 344:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1684
		{
		}
	case 345:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1687
		{
		}
	case 346:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1692
		{
		}
	case 347:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1696
		{
		}
	case 348:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1701
		{
		}
	case 349:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1704
		{
		}
	case 350:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1707
		{
		}
	case 351:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1712
		{
		}
	case 352:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1715
		{
		}
	case 353:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1720
		{
		}
	case 354:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1723
		{
		}
	case 355:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1728
		{
		}
	case 356:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1733
		{
		}
	case 357:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1736
		{
		}
	case 358:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1741
		{
		}
	case 359:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1744
		{
		}
	case 360:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1749
		{
		}
	case 361:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1752
		{
		}
	case 362:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1757
		{
		}
	case 363:
		smiDollar = smiS[smipt-5 : smipt+1]
//line smi.y:1761
		{
		}
	case 364:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1766
		{
		}
	case 365:
		smiDollar = smiS[smipt-8 : smipt+1]
//line smi.y:1773
		{
		}
	case 366:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1778
		{
		}
	case 367:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1781
		{
		}
	case 368:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1786
		{
		}
	case 369:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1789
		{
		}
	case 370:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1794
		{
		}
	case 371:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1799
		{
		}
	case 372:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1802
		{
		}
	case 373:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1805
		{
		}
	case 374:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1810
		{
		}
	case 375:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1813
		{
		}
	case 376:
		smiDollar = smiS[smipt-10 : smipt+1]
//line smi.y:1818
		{
		}
	case 377:
		smiDollar = smiS[smipt-17 : smipt+1]
//line smi.y:1823
		{
		}
	case 378:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1828
		{
		}
	case 379:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1830
		{
		}
	case 380:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1834
		{
		}
	case 381:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1836
		{
		}
	case 382:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1840
		{
		}
	case 383:
		smiDollar = smiS[smipt-8 : smipt+1]
//line smi.y:1844
		{
		}
	case 384:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1849
		{
		}
	case 385:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1852
		{
		}
	case 386:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1857
		{
		}
	case 387:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1862
		{
		}
	case 388:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1865
		{
		}
	case 389:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1870
		{
		}
	case 390:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1872
		{
		}
	case 391:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1876
		{
		}
	case 392:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1878
		{
		}
	case 393:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1882
		{
		}
	case 394:
		smiDollar = smiS[smipt-8 : smipt+1]
//line smi.y:1889
		{
		}
	case 395:
		smiDollar = smiS[smipt-11 : smipt+1]
//line smi.y:1892
		{
		}
	case 396:
		smiDollar = smiS[smipt-2 : smipt+1]
//line smi.y:1897
		{
		}
	case 397:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1899
		{
		}
	case 398:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1903
		{
		}
	case 399:
		smiDollar = smiS[smipt-4 : smipt+1]
//line smi.y:1908
		{
		}
	case 400:
		smiDollar = smiS[smipt-0 : smipt+1]
//line smi.y:1911
		{
		}
	case 401:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1915
		{
		}
	case 402:
		smiDollar = smiS[smipt-3 : smipt+1]
//line smi.y:1917
		{
		}
	case 403:
		smiDollar = smiS[smipt-1 : smipt+1]
//line smi.y:1921
		{
		}
	}
	goto smistack /* stack new state and value */
}
